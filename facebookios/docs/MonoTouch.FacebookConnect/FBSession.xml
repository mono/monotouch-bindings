<Type Name="FBSession" FullName="MonoTouch.FacebookConnect.FBSession">
  <TypeSignature Language="C#" Value="public class FBSession : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FBSession extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>MonoTouch.FacebookConnect</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("FBSession", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>The <computeroutput><see cref="T:MonoTouch.FacebookConnect.FBSession" /></computeroutput> object is used to authenticate a user and manage the user's session. After initializing a <computeroutput><see cref="T:MonoTouch.FacebookConnect.FBSession" /></computeroutput> object the <see cref="T:MonoTouch.FacebookConnect.Facebook" /> App ID and desired permissions are stored. Opening the session will initiate the authentication flow after which a valid user session should be available and subsequently cached. Closing the session can optionally clear the cache.</para>
    </summary>
    <remarks>
      <para>The <computeroutput><see cref="T:MonoTouch.FacebookConnect.FBSession" /></computeroutput> object is used to authenticate a user and manage the user's session. After initializing a <computeroutput><see cref="T:MonoTouch.FacebookConnect.FBSession" /></computeroutput> object the <see cref="T:MonoTouch.FacebookConnect.Facebook" /> App ID and desired permissions are stored. Opening the session will initiate the authentication flow after which a valid user session should be available and subsequently cached. Closing the session can optionally clear the cache.</para>
      <para>If an &lt;FBRequest&gt; request requires user authorization then an <computeroutput><see cref="T:MonoTouch.FacebookConnect.FBSession" /></computeroutput> object should be used.</para>
      <para>Instances of the <computeroutput><see cref="T:MonoTouch.FacebookConnect.FBSession" /></computeroutput> class provide notification of state changes in the following ways:</para>
      <para>
        <list type="number">
          <item>
            <description>Callers of certain FBSession methods may provide a block that will be called back in the course of state transitions for the session (e.g. login or session closed).</description>
          </item>
        </list>
      </para>
      <para>
        <list type="number">
          <item>
            <description>The object supports Key-Value Observing (KVO) for property changes. </description>
          </item>
        </list>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FBSession ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>
          <para>Creating a session</para>
        </summary>
        <remarks>
          <para>Creating a session</para>
          <para>Returns a newly initialized <see cref="T:MonoTouch.FacebookConnect.Facebook" /> session with default values for the parameters to &lt;initWithAppID:permissions:urlSchemeSuffix:tokenCacheStrategy:&gt;. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FBSession (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FBSession (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FBSession (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FBSession (string[] permissions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] permissions) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithPermissions:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="permissions" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="permissions">An array of strings representing the permissions to request during the authentication flow. A value of nil indicates basic permissions. The default is nil.</param>
        <summary>
          <para>Returns a newly initialized <see cref="T:MonoTouch.FacebookConnect.Facebook" /> session with the specified permissions and other default values for parameters to &lt;initWithAppID:permissions:urlSchemeSuffix:tokenCacheStrategy:&gt;.</para>
        </summary>
        <remarks>
          <para>Returns a newly initialized <see cref="T:MonoTouch.FacebookConnect.Facebook" /> session with the specified permissions and other default values for parameters to &lt;initWithAppID:permissions:urlSchemeSuffix:tokenCacheStrategy:&gt;.</para>
          <para>
It is required that any single permission request request (including initial log in) represent read-only permissions or publish permissions only; not both. The permissions passed here should reflect this requirement. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FBSession (string appId, string[] permissions, string urlSchemeSuffix, MonoTouch.FacebookConnect.FBSessionTokenCachingStrategy tokenCachingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string appId, string[] permissions, string urlSchemeSuffix, class MonoTouch.FacebookConnect.FBSessionTokenCachingStrategy tokenCachingStrategy) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithAppID:permissions:urlSchemeSuffix:tokenCacheStrategy:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="permissions" Type="System.String[]" />
        <Parameter Name="urlSchemeSuffix" Type="System.String" />
        <Parameter Name="tokenCachingStrategy" Type="MonoTouch.FacebookConnect.FBSessionTokenCachingStrategy" />
      </Parameters>
      <Docs>
        <param name="appId">An array of strings representing the permissions to request during the authentication flow. A value of nil indicates basic permissions. The default is nil. </param>
        <param name="permissions">The  App ID for the session. If nil is passed in the default App ID will be obtained from a call to &lt;[ defaultAppID]&gt;. The default is nil. </param>
        <param name="urlSchemeSuffix">The URL Scheme Suffix to be used in scenarious where multiple iOS apps use one  App ID. A value of nil indicates that this information should be pulled from the plist. The default is nil. </param>
        <param name="tokenCachingStrategy">Specifies a key name to use for cached token information in NSUserDefaults, nil indicates a default value of "FBAccessTokenInformationKey".</param>
        <summary>
          <para>Following are the descriptions of the arguments along with their defaults when ommitted.</para>
        </summary>
        <remarks>
          <para>Following are the descriptions of the arguments along with their defaults when ommitted.</para>
          <para>
It is required that any single permission request request (including initial log in) represent read-only permissions or publish permissions only; not both. The permissions passed here should reflect this requirement. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FBSession (string appId, string[] permissions, MonoTouch.FacebookConnect.FBSessionDefaultAudience defaultAudience, string urlSchemeSuffix, MonoTouch.FacebookConnect.FBSessionTokenCachingStrategy tokenCachingStrategy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string appId, string[] permissions, valuetype MonoTouch.FacebookConnect.FBSessionDefaultAudience defaultAudience, string urlSchemeSuffix, class MonoTouch.FacebookConnect.FBSessionTokenCachingStrategy tokenCachingStrategy) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithAppID:permissions:defaultAudience:urlSchemeSuffix:tokenCacheStrategy:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="permissions" Type="System.String[]" />
        <Parameter Name="defaultAudience" Type="MonoTouch.FacebookConnect.FBSessionDefaultAudience" />
        <Parameter Name="urlSchemeSuffix" Type="System.String" />
        <Parameter Name="tokenCachingStrategy" Type="MonoTouch.FacebookConnect.FBSessionTokenCachingStrategy" />
      </Parameters>
      <Docs>
        <param name="appId">An array of strings representing the permissions to request during the authentication flow. A value of nil indicates basic permissions. The default is nil. </param>
        <param name="permissions">Most applications use FBSessionDefaultAudienceNone here, only specifying an audience when using reauthorize to request publish permissions. </param>
        <param name="defaultAudience">The  App ID for the session. If nil is passed in the default App ID will be obtained from a call to &lt;[ defaultAppID]&gt;. The default is nil. </param>
        <param name="urlSchemeSuffix">The URL Scheme Suffix to be used in scenarious where multiple iOS apps use one  App ID. A value of nil indicates that this information should be pulled from the plist. The default is nil. </param>
        <param name="tokenCachingStrategy">Specifies a key name to use for cached token information in NSUserDefaults, nil indicates a default value of "FBAccessTokenInformationKey".</param>
        <summary>
          <para>Following are the descriptions of the arguments along with their defaults when ommitted.</para>
        </summary>
        <remarks>
          <para>Following are the descriptions of the arguments along with their defaults when ommitted.</para>
          <para>
It is required that any single permission request request (including initial log in) represent read-only permissions or publish permissions only; not both. The permissions passed here should reflect this requirement. If publish permissions are used, then the audience must also be specified. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessToken">
      <MemberSignature Language="C#" Value="public virtual string AccessToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the `AccessTokenData` property.", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("accessToken", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessTokenData">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.FacebookConnect.FBAccessTokenData AccessTokenData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.FacebookConnect.FBAccessTokenData AccessTokenData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("accessTokenData", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.FacebookConnect.FBAccessTokenData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveSession">
      <MemberSignature Language="C#" Value="public static MonoTouch.FacebookConnect.FBSession ActiveSession { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.FacebookConnect.FBSession ActiveSession" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("activeSession")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setActiveSession:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.FacebookConnect.FBSession</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>An application may get or set the current active session. Certain high-level components in the SDK will use the activeSession to set default session (e.g. <computeroutput><see cref="T:MonoTouch.FacebookConnect.FBLoginView" /></computeroutput>, <computeroutput><see cref="T:MonoTouch.FacebookConnect.FBFriendPickerViewController" /></computeroutput>)</para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>An application may get or set the current active session. Certain high-level components in the SDK will use the activeSession to set default session (e.g. <computeroutput><see cref="T:MonoTouch.FacebookConnect.FBLoginView" /></computeroutput>, <computeroutput><see cref="T:MonoTouch.FacebookConnect.FBFriendPickerViewController" /></computeroutput>)</para>
          <para>If sessionOpen* is called, the resulting <computeroutput><see cref="T:MonoTouch.FacebookConnect.FBSession" /></computeroutput> object also becomes the activeSession. If another session was active at the time, it is closed automatically. If activeSession is called when no session is active, a session object is instatiated and returned; in this case open must be called on the session in order for it to be useable for communication with <see cref="T:MonoTouch.FacebookConnect.Facebook" />. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppID">
      <MemberSignature Language="C#" Value="public virtual string AppID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AppID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("appID", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("close")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Closes the local in-memory session object, but does not clear the persisted token cache. </para>
        </summary>
        <remarks>
          <para>Closes the local in-memory session object, but does not clear the persisted token cache. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseAndClearTokenInformation">
      <MemberSignature Language="C#" Value="public virtual void CloseAndClearTokenInformation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CloseAndClearTokenInformation() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("closeAndClearTokenInformation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Closes the in-memory session, and clears any persisted cache related to the session. </para>
        </summary>
        <remarks>
          <para>Closes the in-memory session, and clears any persisted cache related to the session. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultAppID">
      <MemberSignature Language="C#" Value="public static string DefaultAppID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DefaultAppID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Deprecated in favor of FBSettings.DefaultAppID", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("defaultAppID")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDefaultAppID:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Get the default <see cref="T:MonoTouch.FacebookConnect.Facebook" /> App ID to use for sessions. If not explicitly set, the default will be read from the application's plist. The app ID may be overridden on a per session basis. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>Get the default <see cref="T:MonoTouch.FacebookConnect.Facebook" /> App ID to use for sessions. If not explicitly set, the default will be read from the application's plist. The app ID may be overridden on a per session basis. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultUrlSchemeSuffix">
      <MemberSignature Language="C#" Value="public static string DefaultUrlSchemeSuffix { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property string DefaultUrlSchemeSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Deprecated in favor of FBSettings.DefaultUrlSchemeSuffix", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("defaultUrlSchemeSuffix")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDefaultUrlSchemeSuffix:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidBecomeClosedActiveSessionNotification">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString DidBecomeClosedActiveSessionNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString DidBecomeClosedActiveSessionNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidBecomeOpenActiveSessionNotification">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString DidBecomeOpenActiveSessionNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString DidBecomeOpenActiveSessionNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidSetActiveSessionNotification">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString DidSetActiveSessionNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString DidSetActiveSessionNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUnsetActiveSessionNotification">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString DidUnsetActiveSessionNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString DidUnsetActiveSessionNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpirationDate">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDate ExpirationDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDate ExpirationDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the `AccessTokenData` property.", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("expirationDate", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleDidBecomeActive">
      <MemberSignature Language="C#" Value="public virtual void HandleDidBecomeActive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleDidBecomeActive() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("handleDidBecomeActive")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>A helper method that is used to provide an implementation for [UIApplicationDelegate applicationDidBecomeActive:] to properly resolve session state for the <see cref="T:MonoTouch.FacebookConnect.Facebook" /> Login flow, specifically to support app-switch login. </para>
        </summary>
        <remarks>
          <para>A helper method that is used to provide an implementation for [UIApplicationDelegate applicationDidBecomeActive:] to properly resolve session state for the <see cref="T:MonoTouch.FacebookConnect.Facebook" /> Login flow, specifically to support app-switch login. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HandleOpenURL">
      <MemberSignature Language="C#" Value="public virtual bool HandleOpenURL (MonoTouch.Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HandleOpenURL(class MonoTouch.Foundation.NSUrl url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("handleOpenURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">The URL as passed to [UIApplicationDelegate application:openURL:sourceApplication:annotation:]. </param>
        <summary>
          <para>A helper method that is used to provide an implementation for [UIApplicationDelegate application:openURL:sourceApplication:annotation:]. It should be invoked during the <see cref="T:MonoTouch.FacebookConnect.Facebook" /> Login flow and will update the session information based on the incoming URL.</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>A helper method that is used to provide an implementation for [UIApplicationDelegate application:openURL:sourceApplication:annotation:]. It should be invoked during the <see cref="T:MonoTouch.FacebookConnect.Facebook" /> Login flow and will update the session information based on the incoming URL.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOpen">
      <MemberSignature Language="C#" Value="public virtual bool IsOpen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOpen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isOpen")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Indicates whether the session is open and ready for use. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>Indicates whether the session is open and ready for use. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoginType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.FacebookConnect.FBSessionLoginType LoginType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.FacebookConnect.FBSessionLoginType LoginType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the `AccessTokenData` property.", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("loginType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.FacebookConnect.FBSessionLoginType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Specifies the login type used to authenticate the user. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>Specifies the login type used to authenticate the user. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public virtual void Open (MonoTouch.FacebookConnect.FBSessionStateHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Open(class MonoTouch.FacebookConnect.FBSessionStateHandler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("openWithCompletionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="MonoTouch.FacebookConnect.FBSessionStateHandler" />
      </Parameters>
      <Docs>
        <param name="handler">A block to call with the state changes. The default is nil. </param>
        <summary>
          <para>Instance methods</para>
        </summary>
        <remarks>
          <para>Instance methods</para>
          <para>Opens a session for the <see cref="T:MonoTouch.FacebookConnect.Facebook" />.</para>
          <para>A session may not be used with &lt;FBRequest&gt; and other classes in the SDK until it is open. If, prior to calling open, the session is in the &lt;FBSessionStateCreatedTokenLoaded&gt; state, then no UX occurs, and the session becomes available for use. If the session is in the &lt;FBSessionStateCreated&gt; state, prior to calling open, then a call to open causes login UX to occur, either via the <see cref="T:MonoTouch.FacebookConnect.Facebook" /> application or via mobile Safari.</para>
          <para>Open may be called at most once and must be called after the <computeroutput><see cref="T:MonoTouch.FacebookConnect.FBSession" /></computeroutput> is initialized. Open must be called before the session is closed. Calling an open method at an invalid time will result in an exception. The open session methods may be passed a block that will be called back when the session state changes. The block will be released when the session is closed.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public virtual void Open (MonoTouch.FacebookConnect.FBAccessTokenData accessTokenData, MonoTouch.FacebookConnect.FBSessionStateHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Open(class MonoTouch.FacebookConnect.FBAccessTokenData accessTokenData, class MonoTouch.FacebookConnect.FBSessionStateHandler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("openFromAccessTokenData:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessTokenData" Type="MonoTouch.FacebookConnect.FBAccessTokenData" />
        <Parameter Name="handler" Type="MonoTouch.FacebookConnect.FBSessionStateHandler" />
      </Parameters>
      <Docs>
        <param name="accessTokenData">The token data. See  for construction methods. </param>
        <param name="handler">A block to call with session state changes. The default is nil. </param>
        <summary>
          <para>Imports an existing access token and opens the session with it.</para>
        </summary>
        <remarks>
          <para>Imports an existing access token and opens the session with it.</para>
          <para>The method attempts to open the session using an existing access token. No UX will occur. If successful, the session with be in an Open state and the method will return YES; otherwise, NO.</para>
          <para>The method may be called at most once and must be called after the <computeroutput><see cref="T:MonoTouch.FacebookConnect.FBSession" /></computeroutput> is initialized (see below). It must be called before the session is closed. Calling the method at an invalid time will result in an exception. The open session methods may be passed a block that will be called back when the session state changes. The block will be released when the session is closed.</para>
          <para>The initialized session must not have already been initialized from a cache (for example, you could use the <computeroutput>[<see cref="T:MonoTouch.FacebookConnect.FBSessionTokenCachingStrategy" /> nullCacheInstance]</computeroutput> instance).</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public virtual void Open (MonoTouch.FacebookConnect.FBSessionLoginBehavior behavior, MonoTouch.FacebookConnect.FBSessionStateHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Open(valuetype MonoTouch.FacebookConnect.FBSessionLoginBehavior behavior, class MonoTouch.FacebookConnect.FBSessionStateHandler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("openWithBehavior:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="MonoTouch.FacebookConnect.FBSessionLoginBehavior" />
        <Parameter Name="handler" Type="MonoTouch.FacebookConnect.FBSessionStateHandler" />
      </Parameters>
      <Docs>
        <param name="behavior">Controls whether to allow, force, or prohibit  Login or Inline  Login. The default is to allow  Login, with fallback to Inline  Login. </param>
        <param name="handler">A block to call with session state changes. The default is nil. </param>
        <summary>
          <para>Logs a user on to <see cref="T:MonoTouch.FacebookConnect.Facebook" />.</para>
        </summary>
        <remarks>
          <para>Logs a user on to <see cref="T:MonoTouch.FacebookConnect.Facebook" />.</para>
          <para>A session may not be used with &lt;FBRequest&gt; and other classes in the SDK until it is open. If, prior to calling open, the session is in the &lt;FBSessionStateCreatedTokenLoaded&gt; state, then no UX occurs, and the session becomes available for use. If the session is in the &lt;FBSessionStateCreated&gt; state, prior to calling open, then a call to open causes login UX to occur, either via the <see cref="T:MonoTouch.FacebookConnect.Facebook" /> application or via mobile Safari.</para>
          <para>The method may be called at most once and must be called after the <computeroutput><see cref="T:MonoTouch.FacebookConnect.FBSession" /></computeroutput> is initialized. It must be called before the session is closed. Calling the method at an invalid time will result in an exception. The open session methods may be passed a block that will be called back when the session state changes. The block will be released when the session is closed.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenActiveSession">
      <MemberSignature Language="C#" Value="public static bool OpenActiveSession (bool allowLoginUI);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool OpenActiveSession(bool allowLoginUI) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("openActiveSessionWithAllowLoginUI:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowLoginUI" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowLoginUI">Sometimes it is useful to attempt to open a session, but only if no login UI will be required to accomplish the operation. For example, at application startup it may not be disirable to transition to login UI for the user, and yet an open session is desired so long as a cached token can be used to open the session. Passing false to this argument, assures the method will not present UI to the user in order to open the session.</param>
        <summary>
          <para>Class methods</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Class methods</para>
          <para>This is the simplest method for opening a session with <see cref="T:MonoTouch.FacebookConnect.Facebook" />. Using sessionOpen logs on a user, and sets the static activeSession which becomes the default session object for any <see cref="T:MonoTouch.FacebookConnect.Facebook" /> UI widgets used by the application. This session becomes the active session, whether open succeeds or fails.</para>
          <para>Note, if there is not a cached token available, this method will present UI to the user in order to open the session via explicit login by the user.</para>
          <para>
Returns YES if the session was opened synchronously without presenting UI to the user. This occurs when there is a cached token available from a previous run of the application. If NO is returned, this indicates that the session was not immediately opened, via cache. However, if YES was passed as allowLoginUI, then it is possible that the user will login, and the session will become open asynchronously. The primary use for this return value is to switch-on facebook capabilities in your UX upon startup, in the case were the session is opened via cache. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenActiveSession">
      <MemberSignature Language="C#" Value="public static bool OpenActiveSession (string[] readPermissions, bool allowLoginUI, MonoTouch.FacebookConnect.FBSessionStateHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool OpenActiveSession(string[] readPermissions, bool allowLoginUI, class MonoTouch.FacebookConnect.FBSessionStateHandler completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("openActiveSessionWithReadPermissions:allowLoginUI:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readPermissions" Type="System.String[]" />
        <Parameter Name="allowLoginUI" Type="System.Boolean" />
        <Parameter Name="completion" Type="MonoTouch.FacebookConnect.FBSessionStateHandler" />
      </Parameters>
      <Docs>
        <param name="readPermissions">An array of strings representing the read permissions to request during the authentication flow. A value of nil indicates basic permissions. It is not allowed to pass publish permissions to this method.</param>
        <param name="allowLoginUI">Sometimes it is useful to attempt to open a session, but only if no login UI will be required to accomplish the operation. For example, at application startup it may not be desirable to transition to login UI for the user, and yet an open session is desired so long as a cached token can be used to open the session. Passing false to this argument, assures the method will not present UI to the user in order to open the session.</param>
        <param name="completion">Many applications will benefit from notification when a session becomes invalid or undergoes other state transitions. If a block is provided, the  object will call the block each time the session changes state.</param>
        <summary>
          <para>This is a simple method for opening a session with <see cref="T:MonoTouch.FacebookConnect.Facebook" />. Using sessionOpen logs on a user, and sets the static activeSession which becomes the default session object for any <see cref="T:MonoTouch.FacebookConnect.Facebook" /> UI widgets used by the application. This session becomes the active session, whether open succeeds or fails.</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This is a simple method for opening a session with <see cref="T:MonoTouch.FacebookConnect.Facebook" />. Using sessionOpen logs on a user, and sets the static activeSession which becomes the default session object for any <see cref="T:MonoTouch.FacebookConnect.Facebook" /> UI widgets used by the application. This session becomes the active session, whether open succeeds or fails.</para>
          <para>
Returns true if the session was opened synchronously without presenting UI to the user. This occurs when there is a cached token available from a previous run of the application. If NO is returned, this indicates that the session was not immediately opened, via cache. However, if YES was passed as allowLoginUI, then it is possible that the user will login, and the session will become open asynchronously. The primary use for this return value is to switch-on facebook capabilities in your UX upon startup, in the case were the session is opened via cache. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenActiveSession">
      <MemberSignature Language="C#" Value="public static bool OpenActiveSession (string[] publishPermissions, MonoTouch.FacebookConnect.FBSessionDefaultAudience defaultAudience, bool allowLoginUI, MonoTouch.FacebookConnect.FBSessionStateHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool OpenActiveSession(string[] publishPermissions, valuetype MonoTouch.FacebookConnect.FBSessionDefaultAudience defaultAudience, bool allowLoginUI, class MonoTouch.FacebookConnect.FBSessionStateHandler completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("openActiveSessionWithPublishPermissions:defaultAudience:allowLoginUI:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="publishPermissions" Type="System.String[]" />
        <Parameter Name="defaultAudience" Type="MonoTouch.FacebookConnect.FBSessionDefaultAudience" />
        <Parameter Name="allowLoginUI" Type="System.Boolean" />
        <Parameter Name="completion" Type="MonoTouch.FacebookConnect.FBSessionStateHandler" />
      </Parameters>
      <Docs>
        <param name="publishPermissions">An array of strings representing the publish permissions to request during the authentication flow.</param>
        <param name="defaultAudience">Anytime an app publishes on behalf of a user, the post must have an audience (e.g. me, my friends, etc.) The default audience is used to notify the user of the cieling that the user agrees to grant to the app for the provided permissions.</param>
        <param name="allowLoginUI">Sometimes it is useful to attempt to open a session, but only if no login UI will be required to accomplish the operation. For example, at application startup it may not be desirable to transition to login UI for the user, and yet an open session is desired so long as a cached token can be used to open the session. Passing false to this argument, assures the method will not present UI to the user in order to open the session.</param>
        <param name="completion">Many applications will benefit from notification when a session becomes invalid or undergoes other state transitions. If a block is provided, the  object will call the block each time the session changes state.</param>
        <summary>
          <para>This is a simple method for opening a session with <see cref="T:MonoTouch.FacebookConnect.Facebook" />. Using sessionOpen logs on a user, and sets the static activeSession which becomes the default session object for any <see cref="T:MonoTouch.FacebookConnect.Facebook" /> UI widgets used by the application. This session becomes the active session, whether open succeeds or fails.</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This is a simple method for opening a session with <see cref="T:MonoTouch.FacebookConnect.Facebook" />. Using sessionOpen logs on a user, and sets the static activeSession which becomes the default session object for any <see cref="T:MonoTouch.FacebookConnect.Facebook" /> UI widgets used by the application. This session becomes the active session, whether open succeeds or fails.</para>
          <para>
Returns true if the session was opened synchronously without presenting UI to the user. This occurs when there is a cached token available from a previous run of the application. If NO is returned, this indicates that the session was not immediately opened, via cache. However, if YES was passed as allowLoginUI, then it is possible that the user will login, and the session will become open asynchronously. The primary use for this return value is to switch-on facebook capabilities in your UX upon startup, in the case were the session is opened via cache. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Permissions">
      <MemberSignature Language="C#" Value="public virtual string[] Permissions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Permissions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("permissions", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReauthorizeWithPermissions">
      <MemberSignature Language="C#" Value="public virtual void ReauthorizeWithPermissions (string[] permissions, MonoTouch.FacebookConnect.FBSessionLoginBehavior behavior, MonoTouch.FacebookConnect.FBSessionReauthorizeResultHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReauthorizeWithPermissions(string[] permissions, valuetype MonoTouch.FacebookConnect.FBSessionLoginBehavior behavior, class MonoTouch.FacebookConnect.FBSessionReauthorizeResultHandler completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("reauthorizeWithPermissions:behavior:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissions" Type="System.String[]" />
        <Parameter Name="behavior" Type="MonoTouch.FacebookConnect.FBSessionLoginBehavior" />
        <Parameter Name="completion" Type="MonoTouch.FacebookConnect.FBSessionReauthorizeResultHandler" />
      </Parameters>
      <Docs>
        <param name="permissions">An array of strings representing the permissions to request during the authentication flow. A value of nil indicates basic permissions. The default is nil. </param>
        <param name="behavior">Controls whether to allow, force, or prohibit  Login. The default is to allow  Login and fall back to Inline  Login if needed. </param>
        <param name="completion">A block to call with session state changes. The default is nil.</param>
        <summary>
          <para>Reauthorizes the session, with additional permissions.</para>
        </summary>
        <remarks>
          <para>Reauthorizes the session, with additional permissions.</para>
          <para>
Methods and properties that specify permissions without a read or publish qualification are deprecated; use of a read-qualified or publish-qualified alternative is preferred (e.g. reauthorizeWithReadPermissions or reauthorizeWithPublishPermissions) </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReauthorizeWithPublishPermissions">
      <MemberSignature Language="C#" Value="public virtual void ReauthorizeWithPublishPermissions (string[] writePermissions, MonoTouch.FacebookConnect.FBSessionDefaultAudience defaultAudience, MonoTouch.FacebookConnect.FBSessionReauthorizeResultHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReauthorizeWithPublishPermissions(string[] writePermissions, valuetype MonoTouch.FacebookConnect.FBSessionDefaultAudience defaultAudience, class MonoTouch.FacebookConnect.FBSessionReauthorizeResultHandler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("reauthorizeWithPublishPermissions:defaultAudience:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use `RequestNewPublishPermissions` instead", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writePermissions" Type="System.String[]" />
        <Parameter Name="defaultAudience" Type="MonoTouch.FacebookConnect.FBSessionDefaultAudience" />
        <Parameter Name="handler" Type="MonoTouch.FacebookConnect.FBSessionReauthorizeResultHandler" />
      </Parameters>
      <Docs>
        <param name="writePermissions">An array of strings representing the permissions to request during the authentication flow.</param>
        <param name="defaultAudience">Specifies the audience for posts.</param>
        <param name="handler">A block to call with session state changes. The default is nil.</param>
        <summary>
          <para>Reauthorizes the session, with additional permissions.</para>
        </summary>
        <remarks>
          <para>Reauthorizes the session, with additional permissions.</para>
          <para>
This method is a deprecated alias of &lt;[<see cref="T:MonoTouch.FacebookConnect.FBSession" /> requestNewPublishPermissions:defaultAudience:completionHandler:]&gt;. Consider using &lt;[<see cref="T:MonoTouch.FacebookConnect.FBSession" /> requestNewPublishPermissions:defaultAudience:completionHandler:]&gt;, which is preferred for readability. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReauthorizeWithReadPermissions">
      <MemberSignature Language="C#" Value="public virtual void ReauthorizeWithReadPermissions (string[] readPermissions, MonoTouch.FacebookConnect.FBSessionReauthorizeResultHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReauthorizeWithReadPermissions(string[] readPermissions, class MonoTouch.FacebookConnect.FBSessionReauthorizeResultHandler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("reauthorizeWithReadPermissions:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use `RequestNewReadPermissions` instead", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readPermissions" Type="System.String[]" />
        <Parameter Name="handler" Type="MonoTouch.FacebookConnect.FBSessionReauthorizeResultHandler" />
      </Parameters>
      <Docs>
        <param name="readPermissions">An array of strings representing the permissions to request during the authentication flow. A value of nil indicates basic permissions.</param>
        <param name="handler">A block to call with session state changes. The default is nil.</param>
        <summary>
          <para>Reauthorizes the session, with additional permissions.</para>
        </summary>
        <remarks>
          <para>Reauthorizes the session, with additional permissions.</para>
          <para>
This method is a deprecated alias of &lt;[<see cref="T:MonoTouch.FacebookConnect.FBSession" /> requestNewReadPermissions:completionHandler:]&gt;. Consider using &lt;[<see cref="T:MonoTouch.FacebookConnect.FBSession" /> requestNewReadPermissions:completionHandler:]&gt;, which is preferred for readability. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenewSystemCredentials">
      <MemberSignature Language="C#" Value="public static void RenewSystemCredentials (MonoTouch.FacebookConnect.FBSessionRenewSystemCredentialsHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RenewSystemCredentials(class MonoTouch.FacebookConnect.FBSessionRenewSystemCredentialsHandler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("renewSystemCredentials:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="MonoTouch.FacebookConnect.FBSessionRenewSystemCredentialsHandler" />
      </Parameters>
      <Docs>
        <param name="handler">The completion handler to call when the renewal is completed. The handler will be invoked on the main thread.</param>
        <summary>
          <para>Issues an asychronous renewCredentialsForAccount call to the device <see cref="T:MonoTouch.FacebookConnect.Facebook" /> account store.</para>
        </summary>
        <remarks>
          <para>Issues an asychronous renewCredentialsForAccount call to the device <see cref="T:MonoTouch.FacebookConnect.Facebook" /> account store.</para>
          <para>
This can be used to explicitly renew account credentials on iOS 6 devices and is provided as a convenience wrapper around <computeroutput>[ACAccountStore renewCredentialsForAccount:completion]</computeroutput>. Note the method will not issue the renewal call if the the <see cref="T:MonoTouch.FacebookConnect.Facebook" /> account has not been set on the device, or if access had not been granted to the account (though the handler wil receive an error).</para>
          <para>This is safe to call (and will surface an error to the handler) on versions of iOS before 6 or if the user logged in via Safari or <see cref="T:MonoTouch.FacebookConnect.Facebook" /> SSO. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestNewPublishPermissions">
      <MemberSignature Language="C#" Value="public virtual void RequestNewPublishPermissions (string[] writePermissions, MonoTouch.FacebookConnect.FBSessionDefaultAudience defaultAudience, MonoTouch.FacebookConnect.FBSessionRequestPermissionResultHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestNewPublishPermissions(string[] writePermissions, valuetype MonoTouch.FacebookConnect.FBSessionDefaultAudience defaultAudience, class MonoTouch.FacebookConnect.FBSessionRequestPermissionResultHandler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("requestNewPublishPermissions:defaultAudience:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writePermissions" Type="System.String[]" />
        <Parameter Name="defaultAudience" Type="MonoTouch.FacebookConnect.FBSessionDefaultAudience" />
        <Parameter Name="handler" Type="MonoTouch.FacebookConnect.FBSessionRequestPermissionResultHandler" />
      </Parameters>
      <Docs>
        <param name="writePermissions">An array of strings representing the permissions to request during the authentication flow.</param>
        <param name="defaultAudience">Specifies the audience for posts.</param>
        <param name="handler">A block to call with session state changes. The default is nil.</param>
        <summary>
          <para>Requests new or additional write permissions for the session.</para>
        </summary>
        <remarks>
          <para>Requests new or additional write permissions for the session.</para>
          <para>
The handler, if non-nil, is called once the operation has completed or failed. This is in contrast to the state completion handler used in &lt;[<see cref="T:MonoTouch.FacebookConnect.FBSession" /> openWithCompletionHandler:]&gt; (and other <computeroutput>open*</computeroutput> methods) which is called for each state-change for the session. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestNewReadPermissions">
      <MemberSignature Language="C#" Value="public virtual void RequestNewReadPermissions (string[] readPermissions, MonoTouch.FacebookConnect.FBSessionRequestPermissionResultHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestNewReadPermissions(string[] readPermissions, class MonoTouch.FacebookConnect.FBSessionRequestPermissionResultHandler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("requestNewReadPermissions:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readPermissions" Type="System.String[]" />
        <Parameter Name="handler" Type="MonoTouch.FacebookConnect.FBSessionRequestPermissionResultHandler" />
      </Parameters>
      <Docs>
        <param name="readPermissions">An array of strings representing the permissions to request during the authentication flow. A value of nil indicates basic permissions.</param>
        <param name="handler">A block to call with session state changes. The default is nil.</param>
        <summary>
          <para>Requests new or additional read permissions for the session.</para>
        </summary>
        <remarks>
          <para>Requests new or additional read permissions for the session.</para>
          <para>
The handler, if non-nil, is called once the operation has completed or failed. This is in contrast to the state completion handler used in &lt;[<see cref="T:MonoTouch.FacebookConnect.FBSession" /> openWithCompletionHandler:]&gt; (and other <computeroutput>open*</computeroutput> methods) which is called for each state-change for the session. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.FacebookConnect.FBSessionState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.FacebookConnect.FBSessionState State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("state")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.FacebookConnect.FBSessionState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Detailed session state </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>Detailed session state </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlSchemeSuffix">
      <MemberSignature Language="C#" Value="public virtual string UrlSchemeSuffix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UrlSchemeSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("urlSchemeSuffix", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
