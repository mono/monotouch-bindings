// This file has been autogenerated from parsing an Objective-C header file added in Xcode.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.CoreLocation;
using Tapit;

namespace TapitExample
{
	public partial class FirstViewController : UIViewController
	{
		CLLocationManager locationManager;
		public FirstViewController (IntPtr handle) : base (handle)
		{
		}
		TapItRequest request;
		public override void ViewDidLoad ()
		{

			this.locationManager = new CLLocationManager();
			locationManager.StartMonitoringSignificantLocationChanges();
			tapitAd.WillLoadAd += HandleWillLoadAd;

			tapitAd.DidFinish += HandleDidFinish;

			tapitAd.DidLoadAd += HandleDidLoadAd;
			tapitAd.FailedToReceiveAd += HandleFailedToReceiveAd;
			NSDictionary parameters = NSDictionary.FromObjectAndKey( new NSString("test"),new NSString("mode"));
			request = TapItRequest.FromZone(AppDelegate.ZoneId,parameters);
			if(locationManager.Location != null)
				request.UpdateLocation(locationManager.Location);
			tapitAd.StartServingAds(request);

			button.TouchDown += HandleTouchDown;
		
		}
		void HandleTouchDown (object sender, EventArgs e)
		{
			if(tapitAd.IsServingAds)
			{
				tapitAd.CancelAds();
				tapitAd.Hidden = true;
				button.SetTitle("show", UIControlState.Normal);
			}
			else
			{
				tapitAd.Hidden = false;
				tapitAd.StartServingAds(request);
				button.SetTitle("hide", UIControlState.Normal);
			}

		}

		void HandleFailedToReceiveAd (object sender, TapitErrorEventArgs e)
		{

		}

		void HandleDidLoadAd (object sender, EventArgs e)
		{

		}

		void HandleDidFinish (object sender, EventArgs e)
		{

		}

		void HandleWillLoadAd (object sender, EventArgs e)
		{

		}
		public override void ViewDidUnload ()
		{
			base.ViewDidUnload ();
			//locationManager.StopMonitoringSignificantLocationChanges();
		}
		public override bool ShouldAutorotateToInterfaceOrientation (UIInterfaceOrientation toInterfaceOrientation)
		{
			return true;
		}
		public override void WillRotate (UIInterfaceOrientation toInterfaceOrientation, double duration)
		{
			base.WillRotate (toInterfaceOrientation, duration);
		//	tapitAd.RepositionToInterfaceOrientation(toInterfaceOrientation);
		}
	}
}
