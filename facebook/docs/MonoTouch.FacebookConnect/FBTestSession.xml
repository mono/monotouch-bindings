<?xml version="1.0" encoding="utf-8"?>
<Type Name="FBTestSession" FullName="MonoTouch.FacebookConnect.FBTestSession">
  <TypeSignature Language="C#" Value="public class FBTestSession : MonoTouch.FacebookConnect.FBSession" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit FBTestSession extends MonoTouch.FacebookConnect.FBSession" />
  <AssemblyInfo>
    <AssemblyName>MonoTouch.FacebookConnect</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.FacebookConnect.FBSession</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("FBTestSession", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>Implements an <see cref="T:MonoTouch.FacebookConnect.FBSession" /> subclass that knows about test users for a particular application. This should never be used from a real application, but may be useful for writing unit tests, etc.</para>
    </summary>
    <remarks>
      <para>Implements an <see cref="T:MonoTouch.FacebookConnect.FBSession" /> subclass that knows about test users for a particular application. This should never be used from a real application, but may be useful for writing unit tests, etc.</para>
      <para>
        <see cref="T:MonoTouch.FacebookConnect.Facebook" /> allows developers to create test accounts for testing their applications' <see cref="T:MonoTouch.FacebookConnect.Facebook" /> integration (see <ulink url="https://developers.facebook.com/docs/test_users/">https://developers.facebook.com/docs/test_users/</ulink>). This class simplifies use of these accounts for writing unit tests. It is not designed for use in production application code.</para>
      <para>The main use case for this class is using sessionForUnitTestingWithPermissions:mode: to create a session for a test user. Two modes are supported. In "shared" mode, an attempt is made to find an existing test user that has the required permissions and, if it is not currently in use by another <see cref="T:MonoTouch.FacebookConnect.FBTestSession" />, just use that user. If no such user is available, a new one is created with the required permissions. In "private" mode, designed for scenarios which require a new user in a known clean state, a new test user will always be created, and it will be automatically deleted when the <see cref="T:MonoTouch.FacebookConnect.FBTestSession" /> is closed.</para>
      <para>Note that the shared test user functionality depends on a naming convention for the test users. It is important that any testing of functionality which will mutate the permissions for a test user NOT use a shared test user, or this scheme will break down. If a shared test user seems to be in an invalid state, it can be deleted manually via the Web interface at <ulink url="https://developers.facebook.com/apps/APP_ID/permissions?role=test+users">https://developers.facebook.com/apps/APP_ID/permissions?role=test+users</ulink>. </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FBTestSession ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FBTestSession (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FBTestSession (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FBTestSession (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppAccessToken">
      <MemberSignature Language="C#" Value="public virtual string AppAccessToken { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AppAccessToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("appAccessToken", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAppAccessToken:", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionWithPrivateUserWithPermissions">
      <MemberSignature Language="C#" Value="public static MonoTouch.FacebookConnect.FBTestSession SessionWithPrivateUserWithPermissions (string[] permissions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.FacebookConnect.FBTestSession SessionWithPrivateUserWithPermissions(string[] permissions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("sessionWithPrivateUserWithPermissions:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.FacebookConnect.FBTestSession</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissions" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="permissions">array of strings naming permissions to authorize; nil indicates a common default set of permissions should be used for unit testing </param>
        <summary>
          <para>Constructor helper to create a session for use in unit tests</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Constructor helper to create a session for use in unit tests</para>
          <para>This method creates a session object which creates a test user on open, and destroys the user on close; This method should not be used in application code <ndash /> but is useful for creating unit tests that use the <see cref="T:MonoTouch.FacebookConnect.Facebook" /> SDK.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionWithPrivateUserWithPermissions">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject SessionWithPrivateUserWithPermissions (string[] permissions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject SessionWithPrivateUserWithPermissions(string[] permissions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("sessionWithPrivateUserWithPermissions:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissions" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="permissions">array of strings naming permissions to authorize; nil indicates a common default set of permissions should be used for unit testing </param>
        <summary>
          <para>Constructor helper to create a session for use in unit tests</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Constructor helper to create a session for use in unit tests</para>
          <para>This method creates a session object which creates a test user on open, and destroys the user on close; This method should not be used in application code <ndash /> but is useful for creating unit tests that use the <see cref="T:MonoTouch.FacebookConnect.Facebook" /> SDK.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionWithSharedUserWithPermissions">
      <MemberSignature Language="C#" Value="public static MonoTouch.FacebookConnect.FBTestSession SessionWithSharedUserWithPermissions (string[] permissions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.FacebookConnect.FBTestSession SessionWithSharedUserWithPermissions(string[] permissions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("sessionWithSharedUserWithPermissions:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.FacebookConnect.FBTestSession</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissions" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="permissions">array of strings naming permissions to authorize; nil indicates a common default set of permissions should be used for unit testing </param>
        <summary>
          <para>Constructor helper to create a session for use in unit tests</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Constructor helper to create a session for use in unit tests</para>
          <para>This method creates a session object which uses a shared test user with the right permissions, creating one if necessary on open (but not deleting it on close, so it can be re-used in later tests). Calling this method multiple times may return sessions with the same user. If this is not desired, use the variant sessionWithSharedUserWithPermissions:uniqueUserTag:.</para>
          <para>This method should not be used in application code <ndash /> but is useful for creating unit tests that use the <see cref="T:MonoTouch.FacebookConnect.Facebook" /> SDK.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionWithSharedUserWithPermissions">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject SessionWithSharedUserWithPermissions (string[] permissions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject SessionWithSharedUserWithPermissions(string[] permissions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("sessionWithSharedUserWithPermissions:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissions" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="permissions">array of strings naming permissions to authorize; nil indicates a common default set of permissions should be used for unit testing </param>
        <summary>
          <para>Constructor helper to create a session for use in unit tests</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Constructor helper to create a session for use in unit tests</para>
          <para>This method creates a session object which uses a shared test user with the right permissions, creating one if necessary on open (but not deleting it on close, so it can be re-used in later tests). Calling this method multiple times may return sessions with the same user. If this is not desired, use the variant sessionWithSharedUserWithPermissions:uniqueUserTag:.</para>
          <para>This method should not be used in application code <ndash /> but is useful for creating unit tests that use the <see cref="T:MonoTouch.FacebookConnect.Facebook" /> SDK.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionWithSharedUserWithPermissions">
      <MemberSignature Language="C#" Value="public static MonoTouch.FacebookConnect.FBTestSession SessionWithSharedUserWithPermissions (string[] permissions, string uniqueUserTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.FacebookConnect.FBTestSession SessionWithSharedUserWithPermissions(string[] permissions, string uniqueUserTag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("sessionWithSharedUserWithPermissions:uniqueUserTag:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.FacebookConnect.FBTestSession</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissions" Type="System.String[]" />
        <Parameter Name="uniqueUserTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="permissions">array of strings naming permissions to authorize; nil indicates a common default set of permissions should be used for unit testing</param>
        <param name="uniqueUserTag">a string which will be used to make this user unique among other users with the same permissions. Useful for tests which require two or more users to interact with each other, and which therefore must have sessions associated with different users. For this case, consider using kSecondTestUserTag and kThirdTestUserTag so these users can be shared with other, similar, tests. </param>
        <summary>
          <para>Constructor helper to create a session for use in unit tests</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Constructor helper to create a session for use in unit tests</para>
          <para>This method creates a session object which uses a shared test user with the right permissions, creating one if necessary on open (but not deleting it on close, so it can be re-used in later tests).</para>
          <para>This method should not be used in application code <ndash /> but is useful for creating unit tests that use the <see cref="T:MonoTouch.FacebookConnect.Facebook" /> SDK.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionWithSharedUserWithPermissions">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject SessionWithSharedUserWithPermissions (string[] permissions, string uniqueUserTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject SessionWithSharedUserWithPermissions(string[] permissions, string uniqueUserTag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("sessionWithSharedUserWithPermissions:uniqueUserTag:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="permissions" Type="System.String[]" />
        <Parameter Name="uniqueUserTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="permissions">array of strings naming permissions to authorize; nil indicates a common default set of permissions should be used for unit testing</param>
        <param name="uniqueUserTag">a string which will be used to make this user unique among other users with the same permissions. Useful for tests which require two or more users to interact with each other, and which therefore must have sessions associated with different users. For this case, consider using kSecondTestUserTag and kThirdTestUserTag so these users can be shared with other, similar, tests. </param>
        <summary>
          <para>Constructor helper to create a session for use in unit tests</para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Constructor helper to create a session for use in unit tests</para>
          <para>This method creates a session object which uses a shared test user with the right permissions, creating one if necessary on open (but not deleting it on close, so it can be re-used in later tests).</para>
          <para>This method should not be used in application code <ndash /> but is useful for creating unit tests that use the <see cref="T:MonoTouch.FacebookConnect.Facebook" /> SDK.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TestAppID">
      <MemberSignature Language="C#" Value="public virtual string TestAppID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TestAppID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("testAppID", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTestAppID:", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TestAppSecret">
      <MemberSignature Language="C#" Value="public virtual string TestAppSecret { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TestAppSecret" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("testAppSecret", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTestAppSecret:", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TestUserID">
      <MemberSignature Language="C#" Value="public virtual string TestUserID { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TestUserID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("testUserID", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTestUserID:", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>