<Type Name="CPTPlotRange" FullName="CorePlot.CPTPlotRange">
  <TypeSignature Language="C#" Value="public class CPTPlotRange : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CPTPlotRange extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>CorePlotiOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("CPTPlotRange", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>Defines a range of plot data. </para>
    </summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CPTPlotRange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CPTPlotRange (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CPTPlotRange (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CPTPlotRange (MonoTouch.Foundation.NSDecimal loc, MonoTouch.Foundation.NSDecimal len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype MonoTouch.Foundation.NSDecimal loc, valuetype MonoTouch.Foundation.NSDecimal len) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithLocation:length:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="loc" Type="MonoTouch.Foundation.NSDecimal" />
        <Parameter Name="len" Type="MonoTouch.Foundation.NSDecimal" />
      </Parameters>
      <Docs>
        <param name="loc">The starting location of the range. </param>
        <param name="len">The length of the range. </param>
        <summary>
          <para>Initializes a newly allocated <see cref="T:CorePlot.CPTPlotRange" /> object with the provided location and length. </para>
        </summary>
        <remarks>
          <para>
            <para>The initialized <see cref="T:CorePlot.CPTPlotRange" /> object. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareToDecimal">
      <MemberSignature Language="C#" Value="public virtual CorePlot.CPTPlotRangeComparisonResult CompareToDecimal (MonoTouch.Foundation.NSDecimal number);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CorePlot.CPTPlotRangeComparisonResult CompareToDecimal(valuetype MonoTouch.Foundation.NSDecimal number) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("compareToDecimal:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CorePlot.CPTPlotRangeComparisonResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="number" Type="MonoTouch.Foundation.NSDecimal" />
      </Parameters>
      <Docs>
        <param name="number">The number to check. </param>
        <summary>
          <para>Compares a number to the range, determining if it is in the range, or above or below it. </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <para>The comparison result. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareToDouble">
      <MemberSignature Language="C#" Value="public virtual CorePlot.CPTPlotRangeComparisonResult CompareToDouble (double number);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CorePlot.CPTPlotRangeComparisonResult CompareToDouble(float64 number) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("compareToDouble:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CorePlot.CPTPlotRangeComparisonResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="number">The number to check. </param>
        <summary>
          <para>Compares a number to the range, determining if it is in the range, or above or below it. </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <para>The comparison result. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompareToNumber">
      <MemberSignature Language="C#" Value="public virtual CorePlot.CPTPlotRangeComparisonResult CompareToNumber (MonoTouch.Foundation.NSNumber number);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CorePlot.CPTPlotRangeComparisonResult CompareToNumber(class MonoTouch.Foundation.NSNumber number) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("compareToNumber:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CorePlot.CPTPlotRangeComparisonResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="number" Type="MonoTouch.Foundation.NSNumber" />
      </Parameters>
      <Docs>
        <param name="number">The number to check. </param>
        <summary>
          <para>Compares a number to the range, determining if it is in the range, or above or below it. </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <para>The comparison result. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (MonoTouch.Foundation.NSDecimal number);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(valuetype MonoTouch.Foundation.NSDecimal number) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("contains:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="number" Type="MonoTouch.Foundation.NSDecimal" />
      </Parameters>
      <Docs>
        <param name="number">The number to check. </param>
        <summary>
          <para>Determines whether a given number is inside the range. </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <para>True if <computeroutput>location</computeroutput> ≤ <computeroutput>number</computeroutput> ≤ <computeroutput>end</computeroutput>. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsDouble">
      <MemberSignature Language="C#" Value="public virtual bool ContainsDouble (double number);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsDouble(float64 number) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("containsDouble:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="number" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="number">The number to check. </param>
        <summary>
          <para>Determines whether a given number is inside the range. </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <para>True if <computeroutput>location</computeroutput> ≤ <computeroutput>number</computeroutput> ≤ <computeroutput>end</computeroutput>. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="End">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDecimal End { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.Foundation.NSDecimal End" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("end")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDecimal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The ending value of the range. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndDouble">
      <MemberSignature Language="C#" Value="public virtual double EndDouble { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 EndDouble" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("endDouble")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The ending value of the range as a <computeroutput>double</computeroutput>. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpandRangeByFactor">
      <MemberSignature Language="C#" Value="public virtual void ExpandRangeByFactor (MonoTouch.Foundation.NSDecimal factor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExpandRangeByFactor(valuetype MonoTouch.Foundation.NSDecimal factor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("expandRangeByFactor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="MonoTouch.Foundation.NSDecimal" />
      </Parameters>
      <Docs>
        <param name="factor">Factor used. A value of 1.0 gives no change. Less than 1.0 is a contraction, and greater than 1.0 is expansion. </param>
        <summary>
          <para>Extends/contracts the range by a factor. </para>
        </summary>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromLocationAndLength">
      <MemberSignature Language="C#" Value="public static CorePlot.CPTPlotRange FromLocationAndLength (MonoTouch.Foundation.NSDecimal loc, MonoTouch.Foundation.NSDecimal len);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CorePlot.CPTPlotRange FromLocationAndLength(valuetype MonoTouch.Foundation.NSDecimal loc, valuetype MonoTouch.Foundation.NSDecimal len) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("plotRangeWithLocation:length:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CorePlot.CPTPlotRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loc" Type="MonoTouch.Foundation.NSDecimal" />
        <Parameter Name="len" Type="MonoTouch.Foundation.NSDecimal" />
      </Parameters>
      <Docs>
        <param name="loc">The starting location of the range. </param>
        <param name="len">The length of the range. </param>
        <summary>
          <para>Creates and returns a new <see cref="T:CorePlot.CPTPlotRange" /> instance initialized with the provided location and length. </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <para>A new <see cref="T:CorePlot.CPTPlotRange" /> instance initialized with the provided location and length. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectionPlotRange">
      <MemberSignature Language="C#" Value="public virtual void IntersectionPlotRange (CorePlot.CPTPlotRange otherRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void IntersectionPlotRange(class CorePlot.CPTPlotRange otherRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("intersectionPlotRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherRange" Type="CorePlot.CPTPlotRange" />
      </Parameters>
      <Docs>
        <param name="otherRange">The other plot range. </param>
        <summary>
          <para>Sets the messaged object to the intersection with another range. The sign of <computeroutput>length</computeroutput> is unchanged. </para>
        </summary>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEqualToRange">
      <MemberSignature Language="C#" Value="public virtual bool IsEqualToRange (CorePlot.CPTPlotRange otherRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEqualToRange(class CorePlot.CPTPlotRange otherRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("isEqualToRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherRange" Type="CorePlot.CPTPlotRange" />
      </Parameters>
      <Docs>
        <param name="otherRange">The range to check. </param>
        <summary>
          <para>Determines whether a given range is equal to the range of the receiver. </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <para>True if the ranges both have the same location and length. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDecimal Length { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.Foundation.NSDecimal Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("length")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setLength:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDecimal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The length of the range. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LengthDouble">
      <MemberSignature Language="C#" Value="public virtual double LengthDouble { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LengthDouble" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("lengthDouble")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The length of the range as a <computeroutput>double</computeroutput>. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDecimal Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.Foundation.NSDecimal Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("location")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setLocation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDecimal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The starting value of the range. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationDouble">
      <MemberSignature Language="C#" Value="public virtual double LocationDouble { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 LocationDouble" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("locationDouble")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The starting value of the range as a <computeroutput>double</computeroutput>. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxLimit">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDecimal MaxLimit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.Foundation.NSDecimal MaxLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("maxLimit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDecimal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The maximum extreme value of the range. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxLimitDouble">
      <MemberSignature Language="C#" Value="public virtual double MaxLimitDouble { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MaxLimitDouble" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("maxLimitDouble")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The maximum extreme value of the range as a <computeroutput>double</computeroutput>. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MidPoint">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDecimal MidPoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.Foundation.NSDecimal MidPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("midPoint")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDecimal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The middle value of the range. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinLimit">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDecimal MinLimit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.Foundation.NSDecimal MinLimit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("minLimit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDecimal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The minimum extreme value of the range. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinLimitDouble">
      <MemberSignature Language="C#" Value="public virtual double MinLimitDouble { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 MinLimitDouble" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("minLimitDouble")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The minimum extreme value of the range as a <computeroutput>double</computeroutput>. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShiftEndToFitInRange">
      <MemberSignature Language="C#" Value="public virtual void ShiftEndToFitInRange (CorePlot.CPTPlotRange otherRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShiftEndToFitInRange(class CorePlot.CPTPlotRange otherRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("shiftEndToFitInRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherRange" Type="CorePlot.CPTPlotRange" />
      </Parameters>
      <Docs>
        <param name="otherRange">Other range. The minimum possible shift is made. The range length is unchanged. </param>
        <summary>
          <para>Moves the whole range so that the end point fits in other range. </para>
        </summary>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShiftLocationToFitInRange">
      <MemberSignature Language="C#" Value="public virtual void ShiftLocationToFitInRange (CorePlot.CPTPlotRange otherRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShiftLocationToFitInRange(class CorePlot.CPTPlotRange otherRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("shiftLocationToFitInRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherRange" Type="CorePlot.CPTPlotRange" />
      </Parameters>
      <Docs>
        <param name="otherRange">Other range. The minimum possible shift is made. The range length is unchanged. </param>
        <summary>
          <para>Moves the whole range so that the location fits in other range. </para>
        </summary>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnionPlotRange">
      <MemberSignature Language="C#" Value="public virtual void UnionPlotRange (CorePlot.CPTPlotRange otherRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnionPlotRange(class CorePlot.CPTPlotRange otherRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("unionPlotRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherRange" Type="CorePlot.CPTPlotRange" />
      </Parameters>
      <Docs>
        <param name="otherRange">The other plot range. </param>
        <summary>
          <para>Extends the range to include another range. The sign of <computeroutput>length</computeroutput> is unchanged. </para>
        </summary>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
