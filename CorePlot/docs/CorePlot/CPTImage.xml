<Type Name="CPTImage" FullName="CorePlot.CPTImage">
  <TypeSignature Language="C#" Value="public class CPTImage : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CPTImage extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>CorePlotiOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("CPTImage", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>Wrapper around CGImageRef. </para>
    </summary>
    <remarks>
      <para>A wrapper class around CGImageRef.</para>
      <para>
        <xrefsect id="todo_1_todo000007">
          <xreftitle>Todo</xreftitle>
          <xrefdescription>
            <para>More documentation needed </para>
          </xrefdescription>
        </xrefsect>
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CPTImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CPTImage (MonoTouch.CoreGraphics.CGImage anImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreGraphics.CGImage anImage) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCGImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="anImage" Type="MonoTouch.CoreGraphics.CGImage" />
      </Parameters>
      <Docs>
        <param name="anImage">The image to wrap. </param>
        <summary>
          <para>Initializes a <see cref="T:CorePlot.CPTImage" /> instance with the provided CGImageRef and scale 1.0. </para>
        </summary>
        <remarks>
          <para>
            <para>A <see cref="T:CorePlot.CPTImage" /> instance initialized with the provided CGImageRef. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CPTImage (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CPTImage (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CPTImage (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initForPNGFile:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The file system path of the file. </param>
        <summary>
          <para>Initializes a <see cref="T:CorePlot.CPTImage" /> instance with the contents of a PNG file. </para>
        </summary>
        <remarks>
          <para>On systems that support hi-dpi or "Retina" displays, this method will look for a double-resolution image with the given name followed by "@2x". If the "@2x" image is not available, the named image file will be loaded.</para>
          <para>
            <para>A <see cref="T:CorePlot.CPTImage" /> instance initialized with the contents of the PNG file. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public virtual void Draw (System.Drawing.RectangleF rect, MonoTouch.CoreGraphics.CGContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Draw(valuetype System.Drawing.RectangleF rect, class MonoTouch.CoreGraphics.CGContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("drawInRect:inContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="context" Type="MonoTouch.CoreGraphics.CGContext" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to draw into. </param>
        <param name="context">The graphics context to draw into. </param>
        <summary>
          <para>Draws the image into the given graphics context. </para>
        </summary>
        <remarks>
          <para>If the tiled property is TRUE, the image is repeatedly drawn to fill the clipping region, otherwise the image is scaled to fit in rect.</para>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FRomCGImage">
      <MemberSignature Language="C#" Value="public static CorePlot.CPTImage FRomCGImage (MonoTouch.CoreGraphics.CGImage anImage);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CorePlot.CPTImage FRomCGImage(class MonoTouch.CoreGraphics.CGImage anImage) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageWithCGImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CorePlot.CPTImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anImage" Type="MonoTouch.CoreGraphics.CGImage" />
      </Parameters>
      <Docs>
        <param name="anImage">The image to wrap. </param>
        <summary>
          <para>Creates and returns a new <see cref="T:CorePlot.CPTImage" /> instance initialized with the provided CGImageRef and scale 1.0. </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <para>A new <see cref="T:CorePlot.CPTImage" /> instance initialized with the provided CGImageRef. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPngFile">
      <MemberSignature Language="C#" Value="public static CorePlot.CPTImage FromPngFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CorePlot.CPTImage FromPngFile(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("imageForPNGFile:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CorePlot.CPTImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">The file system path of the file. </param>
        <summary>
          <para>Creates and returns a new <see cref="T:CorePlot.CPTImage" /> instance initialized with the contents of a PNG file. </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>On systems that support hi-dpi or "Retina" displays, this method will look for a double-resolution image with the given name followed by "@2x". If the "@2x" image is not available, the named image file will be loaded.</para>
          <para>
            <para>A new <see cref="T:CorePlot.CPTImage" /> instance initialized with the contents of the PNG file. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Image">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGImage Image { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.CoreGraphics.CGImage Image" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("image")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The CGImageRef to wrap around. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TileAnchoredToContext">
      <MemberSignature Language="C#" Value="public virtual bool TileAnchoredToContext { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TileAnchoredToContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("tileAnchoredToContext")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTileAnchoredToContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Anchor the tiled image to the context origin? </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>If YES, the origin of the tiled image is anchored to the origin of the drawing context. If NO, the origin of the tiled image is set to the orgin of rectangle passed to <computeroutput>drawInRect:inContext:</computeroutput>. The default value is YES. If <computeroutput>tiled</computeroutput> is NO, this property has no effect. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Tiled">
      <MemberSignature Language="C#" Value="public virtual bool Tiled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Tiled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isTiled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTiled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
