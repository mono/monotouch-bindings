<Type Name="CPTLegend" FullName="CorePlot.CPTLegend">
  <TypeSignature Language="C#" Value="public class CPTLegend : CorePlot.CPTBorderedLayer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CPTLegend extends CorePlot.CPTBorderedLayer" />
  <AssemblyInfo>
    <AssemblyName>CorePlotiOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CorePlot.CPTBorderedLayer</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("CPTLegend", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>A graph legend. </para>
    </summary>
    <remarks>
      <para>The legend consists of one or more legend entries associated with plots. Each legend entry is made up of a graphical "swatch" that corresponds with the plot and a text title or label to identify the data series to the viewer. The swatches provide a visual connection to the plot. For instance, a swatch for a scatter plot might include a line segment drawn in the line style of the plot along with a plot symbol while a swatch for a pie chart might only show a rectangle or other shape filled with the background fill of the corresponding pie slice.</para>
      <para>The plots are not required to belong to the same graph, although that is the usual case. This allows creation of a master legend that covers multiple graphs. </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CPTLegend ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CPTLegend (CorePlot.CPTGraph graph);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CorePlot.CPTGraph graph) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithGraph:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="graph" Type="CorePlot.CPTGraph" />
      </Parameters>
      <Docs>
        <param name="graph">A graph. </param>
        <summary>
          <para>Initializes a newly allocated <see cref="T:CorePlot.CPTLegend" /> object and adds legend entries for each plot in the given graph. </para>
        </summary>
        <remarks>
          <para>
            <para>The initialized <see cref="T:CorePlot.CPTLegend" /> object. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CPTLegend (CorePlot.CPTPlot[] newPlots);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CorePlot.CPTPlot[] newPlots) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithPlots:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="newPlots" Type="CorePlot.CPTPlot[]" />
      </Parameters>
      <Docs>
        <param name="newPlots">An array of plots. </param>
        <summary>
          <para>Initializes a newly allocated <see cref="T:CorePlot.CPTLegend" /> object and adds legend entries for each plot in the given array. </para>
        </summary>
        <remarks>
          <para>
            <para>The initialized <see cref="T:CorePlot.CPTLegend" /> object. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CPTLegend (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CPTLegend (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPlot">
      <MemberSignature Language="C#" Value="public virtual void AddPlot (CorePlot.CPTPlot plot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddPlot(class CorePlot.CPTPlot plot) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addPlot:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plot" Type="CorePlot.CPTPlot" />
      </Parameters>
      <Docs>
        <param name="plot">The plot. </param>
        <summary>
          <para>Add a plot to the legend. </para>
        </summary>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllPlots">
      <MemberSignature Language="C#" Value="public virtual CorePlot.CPTPlot[] AllPlots { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CorePlot.CPTPlot[] AllPlots" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("allPlots")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CorePlot.CPTPlot[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>All plots associated with the legend. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <para>An array of all plots associated with the legend. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnMargin">
      <MemberSignature Language="C#" Value="public virtual float ColumnMargin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ColumnMargin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("columnMargin")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setColumnMargin:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The margin between columns, specified in device units. Default is 10.0. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Columns">
      <MemberSignature Language="C#" Value="public virtual int Columns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Columns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("numberOfColumns")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setNumberOfColumns:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The desired number of columns of legend entries. If zero (0) (the default), the number of columns will be automatically determined. If both numberOfRows and numberOfColumns are greater than zero but their product is less than the total number of legend entries, some entries will not be shown. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidths">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSNumber[] ColumnWidths { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSNumber[] ColumnWidths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("columnWidths")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setColumnWidths:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSNumber[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The desired width of each column of legend entries, including the swatch, title, and title offset. Each element in this array should be an NSNumber representing the width of the corresponding column in device units. Columns are numbered from left to right starting from zero (0). If nil, all columns will be sized automatically. If there are more columns in the legend than specified in this array, the remaining columns will be sized automatically. Default is nil. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColumnWidthsThatFit">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSNumber[] ColumnWidthsThatFit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSNumber[] ColumnWidthsThatFit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("columnWidthsThatFit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSNumber[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The computed best-fit width of each column of legend entries, including the swatch, title, and title offset. Each element in this array is an NSNumber representing the width of the corresponding column in device units. Columns are numbered from left to right starting from zero (0). </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualColumns">
      <MemberSignature Language="C#" Value="public virtual bool EqualColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EqualColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("equalColumns")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setEqualColumns:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>If YES each column of legend entries will have the same width, otherwise columns will be sized to best fit the entries. Default is NO, meaning columns will be sized for the best fit. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EqualRows">
      <MemberSignature Language="C#" Value="public virtual bool EqualRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EqualRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("equalRows")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setEqualRows:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>If YES (the default) each row of legend entries will have the same height, otherwise rows will be sized to best fit the entries. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromGraph">
      <MemberSignature Language="C#" Value="public static CorePlot.CPTLegend FromGraph (CorePlot.CPTGraph graph);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CorePlot.CPTLegend FromGraph(class CorePlot.CPTGraph graph) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("legendWithGraph:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CorePlot.CPTLegend</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="graph" Type="CorePlot.CPTGraph" />
      </Parameters>
      <Docs>
        <param name="graph">The graph. </param>
        <summary>
          <para>Creates and returns a new <see cref="T:CorePlot.CPTLegend" /> instance with legend entries for each plot in the given graph. </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <para>A new <see cref="T:CorePlot.CPTLegend" /> instance. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPlots">
      <MemberSignature Language="C#" Value="public static CorePlot.CPTLegend FromPlots (CorePlot.CPTPlot[] newPlots);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CorePlot.CPTLegend FromPlots(class CorePlot.CPTPlot[] newPlots) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("legendWithPlots:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CorePlot.CPTLegend</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newPlots" Type="CorePlot.CPTPlot[]" />
      </Parameters>
      <Docs>
        <param name="newPlots">An array of plots. </param>
        <summary>
          <para>Creates and returns a new <see cref="T:CorePlot.CPTLegend" /> instance with legend entries for each plot in the given array. </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <para>A new <see cref="T:CorePlot.CPTLegend" /> instance. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPlot">
      <MemberSignature Language="C#" Value="public virtual CorePlot.CPTPlot GetPlot (MonoTouch.Foundation.NSObject identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CorePlot.CPTPlot GetPlot(class MonoTouch.Foundation.NSObject identifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("plotWithIdentifier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CorePlot.CPTPlot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="identifier">A plot identifier. </param>
        <summary>
          <para>Gets the plot with the given identifier from the plot array. </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <para>The plot with the given identifier or nil if it was not found. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPlot">
      <MemberSignature Language="C#" Value="public virtual CorePlot.CPTPlot GetPlot (int atIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CorePlot.CPTPlot GetPlot(int32 atIndex) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("plotAtIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CorePlot.CPTPlot</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="atIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="atIndex">An index within the bounds of the plot array. </param>
        <summary>
          <para>Gets the plot at the given index in the plot array. </para>
        </summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            <para>The plot at the given index. </para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual void Insert (CorePlot.CPTPlot plot, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(class CorePlot.CPTPlot plot, int32 index) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("insertPlot:atIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plot" Type="CorePlot.CPTPlot" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="plot">The plot. </param>
        <param name="index">An index within the bounds of the plot array. </param>
        <summary>
          <para>Add a plot to the legend at the given index in the plot array. </para>
        </summary>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutChanged">
      <MemberSignature Language="C#" Value="public virtual bool LayoutChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool LayoutChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("layoutChanged")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>If YES, the legend layout needs to recalculated. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePlot">
      <MemberSignature Language="C#" Value="public virtual void RemovePlot (CorePlot.CPTPlot plot);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemovePlot(class CorePlot.CPTPlot plot) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removePlot:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plot" Type="CorePlot.CPTPlot" />
      </Parameters>
      <Docs>
        <param name="plot">The plot to remove. </param>
        <summary>
          <para>Remove a plot from the legend. </para>
        </summary>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePlot">
      <MemberSignature Language="C#" Value="public virtual void RemovePlot (MonoTouch.Foundation.NSObject identifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemovePlot(class MonoTouch.Foundation.NSObject identifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removePlotWithIdentifier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="identifier">The identifier of the plot to remove. </param>
        <summary>
          <para>Remove a plot from the legend. </para>
        </summary>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHeights">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSNumber[] RowHeights { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSNumber[] RowHeights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("rowHeights")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setRowHeights:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSNumber[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The desired height of each row of legend entries, including the swatch and title. Each element in this array should be an NSNumber representing the height of the corresponding row in device units. Rows are numbered from top to bottom starting from zero (0). If nil, all rows will be sized automatically. If there are more rows in the legend than specified in this array, the remaining rows will be sized automatically. Default is nil. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHeightsThatFit">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSNumber RowHeightsThatFit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSNumber RowHeightsThatFit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("rowHeightsThatFit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The computed best-fit height of each row of legend entries, including the swatch and title. Each element in this array is an NSNumber representing the height of the corresponding row in device units. Rows are numbered from top to bottom starting from zero (0). </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowMargin">
      <MemberSignature Language="C#" Value="public virtual float RowMargin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 RowMargin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("rowMargin")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setRowMargin:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The margin between rows, specified in device units. Default is 5.0. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rows">
      <MemberSignature Language="C#" Value="public virtual int Rows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Rows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("numberOfRows")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setNumberOfRows:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The desired number of rows of legend entries. If zero (0) (the default), the number of rows will be automatically determined. If both numberOfRows and numberOfColumns are greater than zero but their product is less than the total number of legend entries, some entries will not be shown. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLayoutChanged">
      <MemberSignature Language="C#" Value="public virtual void SetLayoutChanged ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLayoutChanged() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setLayoutChanged")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <para>Marks the receiver as needing to update the layout of its legend entries. </para>
        </summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SwatchBorderLineStyle">
      <MemberSignature Language="C#" Value="public virtual CorePlot.CPTLineStyle SwatchBorderLineStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CorePlot.CPTLineStyle SwatchBorderLineStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("swatchBorderLineStyle")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSwatchBorderLineStyle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CorePlot.CPTLineStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The line style for the border drawn around each swatch. If nil (the default), no border is drawn. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SwatchCornerRadius">
      <MemberSignature Language="C#" Value="public virtual float SwatchCornerRadius { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 SwatchCornerRadius" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("swatchCornerRadius")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSwatchCornerRadius:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The corner radius for each swatch. Default is 0.0. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SwatchFill">
      <MemberSignature Language="C#" Value="public virtual CorePlot.CPTFill SwatchFill { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CorePlot.CPTFill SwatchFill" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("swatchFill")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSwatchFill:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CorePlot.CPTFill</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The background fill drawn behind each swatch. If nil (the default), no fill is drawn. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SwatchSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.SizeF SwatchSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF SwatchSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("swatchSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSwatchSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The size of the graphical swatch. If swatchSize is CGSizeZero, swatches will be drawn using a square 150% of the text size on a side. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextStyle">
      <MemberSignature Language="C#" Value="public virtual CorePlot.CPTTextStyle TextStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CorePlot.CPTTextStyle TextStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("textStyle")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTextStyle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CorePlot.CPTTextStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The text style used to draw all legend entry titles. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleOffset">
      <MemberSignature Language="C#" Value="public virtual float TitleOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 TitleOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("titleOffset")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTitleOffset:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>The distance between each swatch and its title, specified in device units. Default is 5.0. </para>
        </summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
